Load the Maps JavaScript API

bookmark_border

This guide shows you how to load the Maps JavaScript API. There are three ways to do this:

Use dynamic library import
Use the direct script loading tag
Use the NPM js-api-loader package
Use Dynamic Library Import
Dynamic library import provides the capability to load libraries at runtime. This lets you request needed libraries at the point when you need them, rather than all at once at load time. It also protects your page from loading the Maps JavaScript API multiple times.

Load the Maps JavaScript API by adding the inline bootstrap loader to your application code, as shown in the following snippet:


<script>
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "YOUR_API_KEY",
    v: "weekly",
    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
    // Add other bootstrap parameters as needed, using camel case.
  });
</script>
You can also add the bootstrap loader code directly to your JavaScript code.

To load libraries at runtime, use the await operator to call importLibrary() from within an async function. Declaring variables for the needed classes lets you skip using a qualified path (e.g. google.maps.Map), as shown in the following code example:



let map;

async function initMap() {
  const { Map } = await google.maps.importLibrary("maps");

  map = new Map(document.getElementById("map"), {
    center: { lat: -34.397, lng: 150.644 },
    zoom: 8,
  });
}

initMap();
Your function can also load libraries without declaring a variable for the needed classes, which is especially useful if you added a map using the gmp-map element. Without the variable you must use qualified paths, for example google.maps.Map:


let map;
let center =  { lat: -34.397, lng: 150.644 };

async function initMap() {
  await google.maps.importLibrary("maps");
  await google.maps.importLibrary("marker");

  map = new google.maps.Map(document.getElementById("map"), {
    center,
    zoom: 8,
    mapId: "DEMO_MAP_ID",
  });

  addMarker();
}

async function addMarker() {
  const marker = new google.maps.marker.AdvancedMarkerElement({
    map,
    position: center,
  });
}

initMap();
Alternatively, you can load the libraries directly in HTML as shown here:


<script>
google.maps.importLibrary("maps");
google.maps.importLibrary("marker");
</script>
Learn how to migrate to the Dynamic Library Loading API.

Required parameters
key: Your API key. The Maps JavaScript API won't load unless a valid API key is specified.
Optional parameters
v: The version of the Maps JavaScript API to load.

libraries: An array of additional Maps JavaScript API libraries to load. Specifying a fixed set of libraries is not generally recommended, but is available for developers who want to finely tune the caching behavior on their website.

language: The language to use. This affects the names of controls, copyright notices, driving directions, and control labels, and the responses to service requests. See the list of supported languages.

region: The region code to use. This alters the API's behavior based on a given country or territory.

authReferrerPolicy: Maps JS customers can configure HTTP Referrer Restrictions in the Cloud Console to limit which URLs are allowed to use a particular API Key. By default, these restrictions can be configured to allow only certain paths to use an API Key. If any URL on the same domain or origin may use the API Key, you can set authReferrerPolicy: "origin" to limit the amount of data sent when authorizing requests from the Maps JavaScript API. When this parameter is specified and HTTP Referrer Restrictions are enabled on Cloud Console, Maps JavaScript API will only be able to load if there is an HTTP Referrer Restriction that matches the current website's domain without a path specified.

mapIds: An array of map IDs. Causes the configuration for the specified map IDs to be preloaded. Specifying map IDs here is not required for map IDs usage, but is available for developers who want to finely tune network performance.

channel: See Usage tracking per channel.

solutionChannel: Google Maps Platform provides many types of sample code to help you get up and running quickly. To track adoption of our more complex code samples and improve solution quality, Google includes the solutionChannel query parameter in API calls in our sample code.

Use the direct script loading tag
This section shows how to use the direct script loading tag. Because the direct script loads libraries when the map loads, it can simplify maps created using a gmp-map element by removing the need to explicitly request libraries at runtime. Since the direct script loading tag loads all requested libraries at once when the script is loaded, performance may be impacted for some applications. Only include the direct script loading tag once per page load.

Note: You can call importLibrary once the direct script loading tag has finished loading.
Add a script tag
To load the Maps JavaScript API inline in an HTML file, add a script tag as shown below.



<script async
    src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&loading=async&callback=initMap">
</script>
Direct script loading URL Parameters
This section discusses all of the parameters you can specify in the query string of the script loading URL when loading the Maps JavaScript API. Certain parameters are required while others are optional. As is standard in URLs, all parameters are separated using the ampersand (&) character.

The following example URL has placeholders for all possible parameters:


https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY
&loading=async
&callback=FUNCTION_NAME
&v=VERSION
&libraries="LIBRARIES"
&language="LANGUAGE"
&region="REGION"
&auth_referrer_policy="AUTH_REFERRER_POLICY"
&map_ids="MAP_IDS"
&channel="CHANNEL"
&solution_channel="SOLUTION_IDENTIFIER"
The URL in the following example script tag loads the Maps JavaScript API:



<script async
    src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&loading=async&callback=initMap">
</script>
Required parameters (direct)
The following parameters are required when loading the Maps JavaScript API.

key: Your API key. The Maps JavaScript API won't load unless a valid API key is specified.
Optional parameters (direct)
Use these parameters to request a specific version of the Maps JavaScript API, load additional libraries, localize your map or specify the HTTP referrer check policy

loading: The code loading strategy that the Maps JavaScript API can use. Set to async to indicate that the Maps JavaScript API has not been loaded synchronously and that no JavaScript code is triggered by the script's load event. It is highly recommended to set this to async whenever possible, for improved performance. (Use the callback parameter instead to perform actions when the Maps JavaScript API is available.) Available starting with version 3.55.

callback: The name of a global function to be called once the Maps JavaScript API loads completely.

v: The version of the Maps JavaScript API to use.

libraries: A comma-separated list of additional Maps JavaScript API libraries to load.

language: The language to use. This affects the names of controls, copyright notices, driving directions, and control labels, as well as the responses to service requests. See the list of supported languages.

region: The region code to use. This alters the API's behavior based on a given country or territory.

auth_referrer_policy: Customers can configure HTTP Referrer Restrictions in the Cloud Console to limit which URLs are allowed to use a particular API Key. By default, these restrictions can be configured to allow only certain paths to use an API Key. If any URL on the same domain or origin may use the API Key, you can set auth_referrer_policy=origin to limit the amount of data sent when authorizing requests from the Maps JavaScript API. This is available starting in version 3.46. When this parameter is specified and HTTP Referrer Restrictions are enabled on Cloud Console, Maps JavaScript API will only be able to load if there is an HTTP Referrer Restriction that matches the current website's domain without a path specified.

mapIds: A comma-separated list of map IDs. Causes the configuration for the specified map IDs to be preloaded. Specifying map IDs here is not required for map IDs usage, but is available for developers who want to finely tune network performance.

channel: See Usage tracking per channel.

solution_channel: Google Maps Platform provides many types of sample code to help you get up and running quickly. To track adoption of our more complex code samples and improve solution quality, Google includes the solution_channel query parameter in API calls in our sample code.

Note: This query parameter is for use by Google. See Google Maps Platform solutions parameter for more information.
Use the NPM js-api-loader package
The @googlemaps/js-api-loader package is available, for loading using the NPM package manager. Install it using the following command:


npm install @googlemaps/js-api-loader
This package can be imported into the application with:


import { Loader } from "@googlemaps/js-api-loader"
The loader exposes a Promise and callback interface. The following demonstrates usage of the default Promise method load().


TypeScript
JavaScript

const loader = new Loader({
  apiKey: "YOUR_API_KEY",
  version: "weekly",
  ...additionalOptions,
});

loader.load().then(async () => {
  const { Map } = await google.maps.importLibrary("maps") as google.maps.MapsLibrary;
  map = new Map(document.getElementById("map") as HTMLElement, {
    center: { lat: -34.397, lng: 150.644 },
    zoom: 8,
  });
});
Note: Read the guide on using TypeScript and Google Maps.
See a sample featuring js-api-loader.

The following example shows using loader.importLibrary() to load libraries:


const loader = new Loader({
  apiKey: "YOUR_API_KEY",
  version: "weekly",
  ...additionalOptions,
});

loader
  .importLibrary('maps')
  .then(({Map}) => {
    new Map(document.getElementById("map"), mapOptions);
  })
  .catch((e) => {
    // do something
});
Migrate to the Dynamic Library Import API
This section covers the steps required to migrate your integration to use the Dynamic Library Import API.

Migration steps
First, replace the direct script loading tag with the inline bootstrap loader tag.

Before


<script async
    src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&loading=async&libraries=maps&callback=initMap">
</script>
After

<script>
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "YOUR_API_KEY",
    v: "weekly",
    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
    // Add other bootstrap parameters as needed, using camel case.
  });
</script>
Next, update your application code:

Change your initMap() function to be asynchronous.
Call importLibrary() to load and access the libraries you need.
Before

let map;

function initMap() {
  map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: -34.397, lng: 150.644 },
    zoom: 8,
  });
}

window.initMap = initMap;
After

let map;
// initMap is now async
async function initMap() {
    // Request libraries when needed, not in the script tag.
    const { Map } = await google.maps.importLibrary("maps");
    // Short namespaces can be used.
    map = new Map(document.getElementById("map"), {
        center: { lat: -34.397, lng: 150.644 },
        zoom: 8,
    });
}

initMap();